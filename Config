OPEN SSH

SSH=Secure shell protocolo de administración remota para controlar y configurar servidores remotos de forma cifrada y autenticada.

sudo apt install openssh-server = Instalación
sudo nano /etc/ssh/sshd_config = Editar configuración
Port = Número de puerto a utilizar.
PasswordAuthentication yes = Habilitar login con usuario y contraseña.
PasswordAuthentication no = Para login criptográfico.
PubkeyAuthentication yes = Login criptográfico habilitado.
PermitRootLogin no = Deshabiliatmos al usuario root.
LoginGraceTime 30 = Establece el tiempo para introducir la constraseña.
MaxAuthTries 3 = Número de veces de reintento en contraseña.
MaxStartups 3 = Número de logins simultáneos desde una ip.
AllowUsers usuario usuario1= Crea una lista blanca de usuarios.
DenyUsers usuario usuario1= Lista negra de usuarios.
AllowGroups/DenyUsers Grupo Grupo1 = Lista negra por grupo.
/home/usuario/.ssh = Host conocidos y claves públicas.
sudo /etc/init.d/ssh start = Iniciar servicio.
sudo /etc/init.d/ssh stop = Detener servicio.
sudo /etc/init.d/ssh restart = Reiniciar servicio.



AUTENTICACIÓN

Por usuario y clave.
Por clave pública.


Criptografía:
Clave simétrica o de clave compartida = Se utiliza la misma clave para cifrar y descifrar.
Clave asimétrica = Se crean dos claves, la privada descifra lo cifrado por la pública y al contrario.


Para configurar el acceso SSH con clave pública hay que:

1) Generar el par de claves pública/privada.
ssh-keygen -t rsa = Crear las llaves pública y privada.

2) Copiar la clave pública al servidor.
scp -P 9022 id_rsa.pub urbina@192.168.0.133:/home/urbina

La clave pública hay que incluirla en el archivo /home/user/.ssh/authorized_keys.
Si la carpeta .ssh no existe, la creamos antes de copiar, así como el archivo authorized_keys:
mkdir .ssh
chmod 700 .ssh
touch .ssh/authorized_keys
chmod 600 authorized_keys
cat id_rsa.pub >> /home/sergio/.ssh/authorized_keys
rm id_rsa.pub

3) Deshabilitar el acceso al servidor con contraseña.
PasswordAuthentication No

4) Eliminar la llave id_rsa.pub
rm id_rsa.pub

5) ssh -p 9022 root@192.168.0.133


FIREWALL

Esta sentencia ACEPTA hasta 5 conexiones que provengan de la misma IP pública, a
partir de la sexta conexión lo bloqueamos. Si tenemos varias interfaces de red,
deberemos usar el «-i» para poner por qué interfaz estamos aplicando esta regla,
si no ponemos nada se aplicará a todas ellas.

iptables -A INPUT -p tcp --dport 22445 -m connlimit --connlimit-upto 5 --connlimitmask
32 -j ACCEPT

iptables -A INPUT -j DROP


Configurar el módulo recent para mitigar ataques de fuerza bruta en el servicio SSH.

El módulo recent sirve para limitar el número de conexiones por segundo a nivel de IP,
esto es ideal para protegernos de ataques al puerto SSH porque un atacante probará
múltiples contraseñas. En el siguiente ejemplo, daremos de alta en una base de datos
todas las conexiones al puerto TCP 22445 de destino, y daremos de alta el origen de esas
conexiones (la IP pública de un posible atacante).

iptables -A INPUT -p tcp --dport 22445 -m conntrack --ctstate NEW -m recent --set --
name ssh --rsource

Posteriormente, chequeamos que en la tabla no haya más de 4 coincidencias en los
últimos 60 segundos. Si hay más de 4 coincidencias, procedemos a bloquear todas las
conexiones a partir de ahí.

iptables -A INPUT -p tcp --dport 22445 -m state --state NEW -m recent --rcheck --
seconds 60 --hitcount 4 --name ssh --rsource -j DROP

